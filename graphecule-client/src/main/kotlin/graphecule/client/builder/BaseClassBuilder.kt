/*
 * Copyright (C) 2020 Joseph Samuel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package graphecule.client.builder

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import graphecule.client.model.ClassInfo
import graphecule.client.model.FieldType
import graphecule.client.model.GraphModel
import graphecule.client.model.TypeKind
import java.io.File

/**
 * Base class for class builders
 */
internal abstract class AbstractClassBuilder(
    protected val parentPackageName: String,
    protected val outputLocation: File,
    protected val classInfoToBuild: ClassInfo,
    protected val graphModel: GraphModel
) : FileBuilder {

    private val modelPackagePrefix = "$parentPackageName.model"
    private val inputPackagePrefix = "$parentPackageName.input"
    protected val wrapperInterfaceSuffix = "GraphInterface"
    protected val innerRequestClassNameSuffix = "Request"


    /**
     * Returns the file name to be used for the given className
     */
    private fun getGeneratedFileNameFor(className: String): String {
        return if (graphModel.classNameCounts[className.toLowerCase()] != 1) {
            "$className${className.hashCode()}"
        } else {
            className
        }
    }

    /**
     * Returns the package name for the given className.
     * This will be different based on whether it is query/mutation class and whether it is
     *  model or input classes.
     */
    protected fun getPackageNameForClass(className: String) =
        if (className == graphModel.queryClass.name || className == graphModel.mutationClass?.name) {
            parentPackageName
        } else {
            if (graphModel.classMap[className]?.typeKind == TypeKind.INPUT_OBJECT) {
                inputPackagePrefix
            } else {
                modelPackagePrefix
            }
        }

    /**
     * Builds and write the class
     */
    protected fun writeClass(classBuilder: TypeSpec.Builder) {
        val packageName = getPackageNameForClass(classInfoToBuild.name)
        val fileSpecBuilder = FileSpec.builder(packageName, getGeneratedFileNameFor(classInfoToBuild.name))
        fileSpecBuilder.addComment(FILE_HEADER)
        fileSpecBuilder.addType(classBuilder.build())
        fileSpecBuilder.build().writeTo(outputLocation)
    }

    /**
     * Returns the [TypeName] for the given [FieldType]
     */
    protected fun getType(fieldType: FieldType): TypeName {
        val fType: TypeName = when (fieldType.kind) {
            TypeKind.INT -> Int::class.asTypeName()
            TypeKind.FLOAT -> Double::class.asTypeName()
            TypeKind.STRING -> String::class.asTypeName()
            TypeKind.BOOLEAN -> Boolean::class.asTypeName()
            TypeKind.ID -> String::class.asTypeName()
            TypeKind.LIST -> List::class.asTypeName().parameterizedBy(getType(fieldType.subType!!))

            TypeKind.OBJECT,
            TypeKind.INTERFACE,
            TypeKind.UNION,
            TypeKind.ENUM,
            TypeKind.INPUT_OBJECT -> {
                val classTypeName = if (graphModel.classMap[fieldType.name]?.childClasses?.isNotEmpty() == true) {
                    "${fieldType.name}$wrapperInterfaceSuffix"
                } else {
                    fieldType.name
                }
                ClassName(getPackageNameForClass(fieldType.name), classTypeName)
            }
        }
        return fType.copy(nullable = fieldType.isNullable)
    }
}

private const val FILE_HEADER = """
    
    Autogenerated by Graphecule : https://bit.ly/graphecule
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at https://bit.ly/graphecule
   
"""